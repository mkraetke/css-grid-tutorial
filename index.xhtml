<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Grid-Design mit HTML/CSS</title>
    <link rel="stylesheet" href="js/highlight/styles/vs.css" />
    <script src="js/highlight/highlight.pack.js"></script>
    <script>hljs.initHighlightingOnLoad();</script>
    <link rel="stylesheet" type="text/css" href="css/stylesheet.css" />
  </head>
  <body>
    <div class="column-wrapper">
      <div class="column-left"></div>
      <div class="column-center">
        <h1>Grid-Design mit HTML/CSS</h1>
        <section>
          <h2>A1&#x2003;Grid-Design früher: <code>iframe</code></h2>
          <p>Mit <code>&lt;iframe></code> kann man andere HTML-Seiten in eine Seite einbinden <i>(Frameset)</i>. <code>&lt;iframe></code> wird heute
            vor allem für Widgets wie YouTube-Videos verwendet, könnte in Zukunft allerdings durch <i>WebComponents</i> abgelöst werden.</p>
          <div class="example">
            <pre class="code"><code class="html">&lt;iframe src="iframe/iframe-left.xhtml"
        width="100" height="100"/>
&lt;iframe src="iframe/iframe-center.xhtml" 
        width="100" height="100"/>
&lt;iframe src="iframe/iframe-right.xhtml"
        width="100" height="100"/></code></pre>
            <div class="preview">
              <iframe class="cell" src="iframe/iframe-left.xhtml" width="100" height="100"></iframe>
              <iframe class="cell" src="iframe/iframe-center.xhtml" width="100" height="100"></iframe>
              <iframe class="cell" src="iframe/iframe-right.xhtml" width="100" height="100"></iframe>
            </div>
          </div>
          <p>Von Nachteil ist, dass man mit CSS und JavaScript nicht auf den Inhalt der Unterseiten zugreifen kann. Außerdem ist das Vorlesen einer
            Seite mit iframes durch Screenreader nicht sehr komfortabel.</p>
        </section>
        <section>
          <h2>A2&#x2003;Grid-Design früher: <code>table</code></h2>
          <p>HTML-Tabellen wurden früher in Ermangelung von Alternativen auch für Grid Layouts verwendet. Dafür wurde die Seite mit
              <code>&lt;tr></code> (Tabellenzeile) und <code>&lt;td></code> (Tabellenzelle) in separate Bereiche aufgeteilt.</p>
          <div class="example">
            <pre class="code"><code class="html">&lt;table style="width:100%">
  &lt;colgroup>
    &lt;col style="width:30%"/>
    &lt;col style="width:70%"/>
  &lt;/colgroup>
  &lt;tr>
    &lt;td colspan="2">Logo/Header&lt;/td>
  &lt;/tr>
  &lt;tr>
    &lt;td>Navigation&lt;/td>
    &lt;td>Inhalt&lt;/td>
  &lt;/tr>
  &lt;tr>
    &lt;td colspan="2">Footer&lt;/td>
  &lt;/tr>
&lt;/table></code></pre>
            <div class="preview">
              <table style="width:100%">
                <colgroup>
                  <col class="cell" style="width:30%" />
                  <col class="cell" style="width:70%" />
                </colgroup>
                <tr>
                  <td class="cell" colspan="2">Logo/Header</td>
                </tr>
                <tr>
                  <td class="cell">Navigation</td>
                  <td class="cell">Inhalt</td>
                </tr>
                <tr>
                  <td class="cell" colspan="2">Footer</td>
                </tr>
              </table>
            </div>
          </div>
          <p>Rastergestaltung mit HTML-Tabellen gilt jedoch buchstäblich als <i>starrer</i> Ansatz. Die Tabellenzellen umbrechen nicht automatisch bei
            kleinen Bildschirmen. Stattdessen wird der ganze Inhalt auf eine Seite gequetscht. Nicht zuletzt lesen Screenreader den Content Zeile für
            Zeile und Zelle für Zelle vor. Der Screenreader kann bei Tabellen nicht zwischen den Bereichen für Navigation und Inhalt
            unterscheiden.</p>
        </section>
        <section>
          <h2>B&#x2003;Grid-Design heute: CSS <code>float</code></h2>
          <p>Mit der CSS-Property <code>float</code> kann man einstellen, dass Objekte umflossen werden. Dies war lange Zeit die einzige „saubere“
            Möglichkeit, um für Webseiten ein Gestaltungsraster zu entwickeln. Diese Methode funktioniert zuverlässig auf allen gängigen
            Web-Browsern.</p>
          <div class="example">
            <pre class="code"><code class="html">&lt;div>
  &lt;div style="float:left; width:50px">Links&lt;/div>        
  &lt;div style="float:right; width:75px">Rechts&lt;/div>
  &lt;div style="margin-left:50px; min-width:100px;">Mitte&lt;/div>
&lt;/div></code></pre>
            <div class="preview">
              <div class="cell" style="float:left; width:50px">Links</div>
              <div class="cell" style="float:right; width:75px">Rechts</div>
              <div class="cell" style="margin-left:50px; min-width:100px;">Mitte</div>
            </div>
          </div>
          <p>Leider ist diese Methode nicht sehr intuitiv, weil man die Tags mitunter gegen die eigentliche Leserichtung anordnen muss und Abstände
            und Umfluss bei komplexeren Layouts schnell unübersichtlich werden.</p>
        </section>
        <section>
          <h2>C&#x2003;Grid-Design mit CSS <code>grid</code></h2>
          <p>CSS Grid ist eine sehr junge <a href="https://www.w3.org/TR/css3-grid-layout/">W3C-Spezifikation</a> zur Definition von
            Gestaltungsrastern mit HTML und CSS. Sie wird derzeit nur von den <a href="http://caniuse.com/#feat=css-grid" target="_blank">aktuellsten
              Web-Browsern unterstützt</a>.</p>
          <section>
            <h3>HTML Grundgerüst</h3>
            <p>Als Erstes beginnen wir damit, uns für die folgenden Schritte ein HTML-Grundgerüst zu entwerfen, mit dem wir später unser Grid anlegen.
              Das Grundgerüst enthält <code>&lt;div></code>-Elemente mit den Klassen <code>wrapper</code> und <code>box</code>. Die Klassen können wir
              später mit CSS auswählen und formatieren.</p>
            <p>Die Vorlage gibt es <a href="vorlage/vorlage.xhtml" target="_blank">hier</a>.</p>
            <pre class="code"><code class="html">&lt;!DOCTYPE html>
&lt;html xmlns="http://www.w3.org/1999/xhtml">
  &lt;head>
    &lt;title>CSS Grid&lt;/title>
    &lt;style>
      /* CSS */
      .box{background-color:#ccc; margin:0.25em;}
    &lt;/style>
  &lt;/head>
  &lt;body>
    &lt;!-- Div-Elemente mit Klassen -->
    &lt;div class="wrapper">
      &lt;div class="box">Eins&lt;/div>
      &lt;div class="box">Zwei&lt;/div>
      &lt;div class="box">Drei&lt;/div>
      &lt;div class="box">Vier&lt;/div>
      &lt;div class="box">Fünf&lt;/div>
    &lt;/div>        
  &lt;/body>
&lt;/html></code></pre>
          </section>
          <section>
            <h3>Raster-Eigenschaft zuweisen</h3>
            <p>Zunächst muss man definieren, dass der Browser die Elemente als Grid rendern soll. Dafür muss man dem <code>&lt;div></code> mit der
              Klasse <code>wrapper</code> die CSS-Eigenschaft <code>display:grid</code> zuweisen.</p>
            <pre class="code"><code class="html">&lt;style>
  /* CSS */
  .box{background-color:#ccc; margin:0.25em;}
  .wrapper{display:grid;}
&lt;/style></code></pre>
          </section>
          <section>
            <h3>Zeilen und Spalten definieren</h3>
            <p>Mit den CSS-Eigenschaft <code>grid-template-rows</code> und <code>grid-template-columns</code> lassen sich die Anzahl und Maße der
              Zeilen und Spalten definieren. Beginnen wir zunächst ein Raster von drei Spalten mit jeweils 100 Pixel Breite zu definieren:</p>
            <div class="example">
              <pre class="code"><code class="css">.box{background-color:#ccc; margin:0.25em;}
.wrapper{display:grid;
         grid-template-columns: 100px 100px 100px;
         }</code></pre>
              <div class="preview">
                <div class="wrapper" style="display:grid; grid-template-columns: 100px 100px 100px;">
                  <div class="box">Eins</div>
                  <div class="box">Zwei</div>
                  <div class="box">Drei</div>
                  <div class="box">Vier</div>
                  <div class="box">Fünf</div>
                </div>
              </div>
            </div>
            <p>Nun definieren wir noch zwei unterschiedlich große Zeilen mit <code>grid-template-rows</code> fest.</p>
            <div class="example">
              <pre class="code"><code class="css">.box{background-color:#ccc; margin:0.25em;}
.wrapper{display:grid; 
         grid-template-columns: 100px 100px 100px;
         grid-template-rows: 100px 50px;
         }</code></pre>
              <div class="preview">
                <div class="wrapper" style="display:grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 50px;">
                  <div class="box">Eins</div>
                  <div class="box">Zwei</div>
                  <div class="box">Drei</div>
                  <div class="box">Vier</div>
                  <div class="box">Fünf</div>
                </div>
              </div>
            </div>
            <p>Wenn die Maße für jede Zeile bzw. Spalte gleich sind, kann man mit <code>repeat</code> auch etwas Schreibarbeit sparen. Die Anweisung
                <code>repeat(3, 100px)</code> erzeugt <code>3</code> Spalten mit einer Breite von <code>100px</code>.</p>
            <div class="example">
              <pre class="code"><code class="css">.box{background-color:#ccc; margin:0.25em;}
.wrapper{display:grid; 
         grid-template-columns: repeat(3, 100px);
         grid-template-rows: 100px 50px;
         }</code></pre>
              <div class="preview">
                <div class="wrapper" style="display:grid; grid-template-columns: repeat(3, 100px); grid-template-rows: 100px 50px;">
                  <div class="box">Eins</div>
                  <div class="box">Zwei</div>
                  <div class="box">Drei</div>
                  <div class="box">Vier</div>
                  <div class="box">Fünf</div>
                </div>
              </div>
            </div>
          </section>
          <section>
            <h3>Implizit Zeilen und Spalten definieren</h3>
            <p>Mitunter weiß man beim Definieren eines Rasters noch nicht, wie viele Elemente es später enthalten wird. Dafür kann man die
              Eigenschaften <code>grid-auto-rows</code> und <code>grid-auto-columns</code> verwenden. In folgendem Beispiel definieren wir, dass
              unabhängig der Anzahl noch folgender Zeilen, diese immer 100px hoch sein sollen.</p>
            <div class="example">
              <pre class="code"><code class="css">.box{background-color:#ccc; margin:0.25em;}
.wrapper{display:grid; 
         grid-template-columns: repeat(3, 100px);
         grid-auto-rows: 100px;
         }</code></pre>
              <div class="preview">
                <div class="wrapper" style="display:grid; grid-template-columns: repeat(3, 100px); grid-template-rows: 100px 50px;">
                  <div class="box">Eins</div>
                  <div class="box">Zwei</div>
                  <div class="box">Drei</div>
                  <div class="box">Vier</div>
                  <div class="box">Fünf</div>
                </div>
              </div>
            </div>
          </section>
          <section>
            <h3>Die <code>fr</code>-Einheit</h3>
            <p>Mit CSS-Grid kam auch die neue <code>fr</code>-Einheit hinzu. Sie repräsentiert einen Anteil bzw. Bruchteil der verfügbaren
              Bildschirmfläche. Die Anweisung <code>grid-template-columns: 2fr 1fr 1fr;</code> erzeugt drei Spalten, wobei der verfügbare Bereich in
              vier Teile eingeteilt wird und die erste Spalte zwei Teile und die letzten beiden jeweils einen Teil einnehmen.</p>
            <div class="example">
              <pre class="code"><code class="css">.box{background-color:#ccc; margin:0.25em;}
.wrapper{display:grid; 
         grid-template-columns: 2fr 1fr 1fr;
         grid-template-rows: 100px 50px;
         }</code></pre>
              <div class="preview">
                <div class="wrapper" style="display:grid; grid-template-columns: 2fr 1fr 1fr; grid-template-rows: 100px 50px;">
                  <div class="box">Eins</div>
                  <div class="box">Zwei</div>
                  <div class="box">Drei</div>
                  <div class="box">Vier</div>
                  <div class="box">Fünf</div>
                </div>
              </div>
            </div>
          </section>
          <section>
            <h3>Automatische Größenanpassung</h3>
            <p>Mit der Funktion <code>minmax()</code> lässt sich ein Minimum und ein Maximum für die Höhe (Zeile) oder Breite (Spalte) festlegen. Hier
              ist ein Beispiel, bei dem die Zeilenhöhe minimal 100px und maximal ohne Grenze (<code>auto</code>) skaliert werden kann.</p>
            <div class="example">
              <pre class="code"><code class="css">.box{background-color:#ccc; margin:0.25em;}
.wrapper{display:grid; 
         grid-template-columns: repeat(3, 1fr);
         grid-template-rows: repeat(2, minmax(100px, auto));
         }</code></pre>
              <div class="preview">
                <div class="wrapper" style="display:grid; grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(2, minmax(100px, auto));">
                  <div class="box">Eins</div>
                  <div class="box">I daad middn wolpern, Maibam a Biagadn i hob di liab ebba? Amoi da wolln du dadst ma scho daugn gelbe Rüam. Imma
                    Wurscht i mog di fei hi, singan aba Brezn Gidarn is ma Wuascht. Do legst di nieda wos hod spernzaln, d’! Auszutzeln griasd eich
                    midnand griaß God beinand wo hi, gwiss!</div>
                  <div class="box">Drei</div>
                  <div class="box">Vier</div>
                  <div class="box">Fünf</div>
                </div>
              </div>
            </div>
          </section>
          <section>
            <h3>Platz automatisch auffüllen mit <code>auto-fill</code> und <code>auto-fit</code></h3>
            <p>Mit <code>auto-fill</code> und <code>minmax()</code> wird automatisch dafür gesorgt, dass soviele Elemente in den Grid-Container
              eingepasst werden, wie Platz zur Verfügung steht.</p>
            <div class="example">
              <pre class="code"><code class="css">.box{background-color:#ccc; margin:0.25em;}
.wrapper{display:grid; 
         grid-template-columns: repeat(auto-fill, minmax(100px,1fr));
         grid-template-rows: repeat(2, 100px);">
         }</code></pre>
              <div class="preview">
                <div class="wrapper"
                  style="display:grid; 
              grid-template-columns: repeat(auto-fill, minmax(100px,1fr));
              grid-template-rows: repeat(2, 100px);">
                  <div class="box">Eins</div>
                  <div class="box">Zwei</div>
                  <div class="box">Drei</div>
                </div>
              </div>
            </div>
            <p><code>auto-fit</code> funktioniert wie <code>auto-fill</code>, nur dass die Elemente nach dem Platzieren so vergrößert werden, dass sie
              den Platz in der Zeile bzw. Spalte ausfüllen.</p>
            <div class="example">
              <pre class="code"><code class="css">.box{background-color:#ccc; margin:0.25em;}
.wrapper{display:grid; 
         grid-template-columns: repeat(auto-fit, minmax(100px,1fr));
         grid-template-rows: repeat(2, 100px);">
         }</code></pre>
              <div class="preview">
                <div class="wrapper"
                  style="display:grid; 
              grid-template-columns: repeat(auto-fit, minmax(100px,1fr));
              grid-template-rows: repeat(2, 100px);">
                  <div class="box">Eins</div>
                  <div class="box">Zwei</div>
                  <div class="box">Drei</div>
                </div>
              </div>
            </div>
          </section>
          <section>
            <h3>Abstände</h3>
            <p>Um die Abstände zwischen Zeilen und Spalten zu definieren, kann man die CSS-Eigenschaften <code> grid-row-gap</code> und
                <code>grid-column-gap</code> verwenden.</p>
            <div class="example">
              <pre class="code"><code class="css">.box{background-color:#ccc; margin:0.25em;}
.wrapper{display:grid; 
         grid-template-columns: repeat(3, 1fr);
         grid-template-rows: repeat(2, 100px);
         grid-row-gap:2em;
         grid-column-gap:0.75em;
         }</code></pre>
              <div class="preview">
                <div class="wrapper"
                  style="display:grid; grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(2, 100px); grid-row-gap:2em; grid-column-gap:0.75em;">
                  <div class="box">Eins</div>
                  <div class="box">Zwei</div>
                  <div class="box">Drei</div>
                  <div class="box">Vier</div>
                  <div class="box">Fünf</div>
                </div>
              </div>
            </div>
          </section>
          <section>
            <h3>Zeilen/Spalten überspannen</h3>
            <p>Ein sehr willkommenes Feature ist das schon von Tabellen bekannte Überspannens von Rasterzellen über mehrere Zeilen oder Spalten. Diese
              können mit <code>grid-row</code> und <code>grid-column</code> angelegt werden. Dabei muss man als Wert entweder Beginn und Ende
              festlegen oder Beginn und dann mit dem Schlüsselwort <code>span</code> die Länge. Wichtig ist, dass sich Beginn und Ende nicht an der
              Anzahl der Zeilen und Spalten bemisst, sondern an Kanten- und Zwischenlinien der Zeilen bzw. Spalten.</p>
            <div class="example">
              <pre class="code"><code class="html">&lt;!DOCTYPE html>
&lt;html xmlns="http://www.w3.org/1999/xhtml">
  &lt;head>
    &lt;title>CSS Grid&lt;/title>
    &lt;style>
      .box{background-color:#ccc; margin:0.25em;}
      .wrapper{display:grid; 
               grid-template-columns: repeat(3, 1fr);
               grid-template-rows: repeat(4, 100px);
               }
      .a{grid-row: 1 / 3;}
      .d{grid-column: 2 / span 2;}
      .e{grid-row: 3 / span 2; grid-column: 1 / span 3}
    &lt;/style>
  &lt;/head>
  &lt;body>
    &lt;div class="wrapper">
      &lt;div class="box a">Eins&lt;/div>
      &lt;div class="box">Zwei&lt;/div>
      &lt;div class="box">Drei&lt;/div>
      &lt;div class="box d">Vier&lt;/div>
      &lt;div class="box">Fünf&lt;/div>
    &lt;/div>        
  &lt;/body>
&lt;/html></code></pre>
              <div class="preview">
                <div class="wrapper" style="display:grid; grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(4, 100px);">
                  <div class="box" style="grid-row: 1 / 3;">Eins</div>
                  <div class="box">Zwei</div>
                  <div class="box">Drei</div>
                  <div class="box" style="grid-column: 2 / span 2;">Vier</div>
                  <div class="box" style="grid-row: 3 / span 2; grid-column: 1 / span 3">Fünf</div>
                </div>
              </div>
            </div>
          </section>
          <section>
            <h3>Responsive Grids mit Media Queries</h3>
            <p>Für kleinere Bildschirme ist man meistens gezwungen das Layout automatisch anzupassen. Zu diesem Zweck stehen in CSS Media Queries zur
              Verfügung, welche man auch gut verwenden kann, um CSS Grids neu zu definieren.</p>
            <div class="example">
              <pre class="code"><code class="css">.box{background-color:#ccc; margin:0.25em;}
.wrapper{display:grid; 
         grid-template-columns: repeat(3, 1fr);
         grid-template-rows: repeat(2, 100px);
         grid-row-gap:2em;
         grid-column-gap:0.75em;
         }</code></pre>
              <div class="preview">
                <div class="wrapper_responsive">
                  <div class="box">Eins</div>
                  <div class="box">Zwei</div>
                  <div class="box">Drei</div>
                  <div class="box">Vier</div>
                  <div class="box">Fünf</div>
                </div>
              </div>
            </div>
          </section>
        </section>
        <section>
          <h2>D&#x2003;Literatur</h2>
          <dl>
            <dt>Mozilla: Basic Concepts of Grid Layout</dt>
            <dd><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout">https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout</a></dd>
            <dt>Chris House: A Complete Guide to Grid</dt>
            <dd><a href="https://css-tricks.com/snippets/css/complete-guide-grid/">https://css-tricks.com/snippets/css/complete-guide-grid/</a></dd>
            <dt>W3C: CSS Grid Layout Module Level 1</dt>
            <dd><a href="https://www.w3.org/TR/css3-grid-layout/">https://www.w3.org/TR/css3-grid-layout/</a></dd>
          </dl>
        </section>
      </div>
      <div class="column-right"></div>
    </div>
  </body>
</html>
